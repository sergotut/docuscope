# ---------- Build stage: ставим ВСЁ, включая dev ----------
FROM python:3.11-slim AS builder

ARG POETRY_VERSION=1.8.2
ARG PIP_VERSION=24.0
ENV PYTHONUNBUFFERED=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_VERSION=${POETRY_VERSION}

# Системные пакеты, нужные в разработке (gcc – для pytest-cov, netcat – debug)
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        git \
        curl \
        netcat-openbsd \
        libgl1-mesa-glx \
        libglib2.0-0 \
        && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Обновляем pip + ставим Poetry
RUN pip install --no-cache-dir "pip==${PIP_VERSION}" setuptools wheel \
 && pip install --no-cache-dir "poetry==$POETRY_VERSION" \
 && poetry config virtualenvs.create false

# Кэш: сначала только файлы зависимостей
COPY pyproject.toml poetry.lock* ./

# DEV-режим: ставим все группы (+ dev)
RUN poetry install --with dev --no-interaction --no-ansi

# (опционально) отрабатываем pre-commit — слой кэша падает,
# если в коде не проходит формат/линт
COPY . .
RUN pre-commit run --all-files --color=always || true

# ---------- Runtime stage: «толстый» dev-образ ----------
FROM python:3.11-slim

RUN apt-get update && apt-get install -y --no-install-recommends \
        git \
        docker.io \
        libgl1-mesa-glx \
        libglib2.0-0 \
        tini \
        && rm -rf /var/lib/apt/lists/*

RUN git config --system --add safe.directory /app

ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Библиотеки и инструменты разработки
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin/* /usr/local/bin/

# Исходники поверх (обновляются при docker volume mount)
COPY . .

# Непривилегированный пользователь, как в прод-образе
RUN useradd --create-home --uid 1001 appuser
USER appuser

EXPOSE 8000

# Health-probe указывает на тот же энд-поинт
HEALTHCHECK --interval=15s --timeout=5s CMD curl -f http://localhost:8000/health || exit 1

# ----- ENTRYPOINT для разработки -----
# Tini → Uvicorn с auto-reload, лог-уровень debug
ENTRYPOINT ["tini", "-g", "--"]
CMD ["uvicorn", "app.adapters.inbound.http_api:app", \
     "--host", "0.0.0.0", "--port", "8000", \
     "--reload", "--log-level", "debug"]
