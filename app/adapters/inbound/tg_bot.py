"""
Telegram-–±–æ—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ '–î–æ–∫—É–º–µ–Ω—Ç–æ—Å–∫–æ–ø'.

–†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Celery,
–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞/—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏–Ω–≥ –∑–∞–¥–∞—á.
"""

import asyncio
import structlog
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.adapters.inbound.task_result_tracker import task_registry, track_results
from app.core.logging_config import init_logging
from app.core.settings import settings
from app.infrastructure.task_queue import celery_app

init_logging(settings)
logger = structlog.get_logger(__name__)

bot = Bot(
    token=settings.telegram_token,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher()


@dp.message()
async def handle_message(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram-–±–æ—Ç–∞.

    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Celery –∏
    —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    """
    bound = logger.bind(user_id=message.from_user.id)
    if message.document:
        try:
            file = await bot.get_file(message.document.file_id)
            file_bytes = await bot.download_file(file.file_path)

            bound.info("doc_received", filename=message.document.file_name)

            task = celery_app.send_task(
                "app.application.report_service.process_document_task",
                args=[
                    file_bytes.read(),
                    message.document.file_name,
                    message.from_user.id,
                ],
            )
            task_registry[task.id] = message.chat.id

            bound.info("task_submitted", task_id=task.id)
            await message.reply("–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç, –∞–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—Å—è... ‚è≥")
        except Exception as e:
            bound.error("file_processing_error", error=str(e))
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ üò•")
    else:
        bound.info("non_document_message")
        await message.reply("–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª PDF –∏–ª–∏ DOCX –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ üìÑ")


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞.

    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É —Ç—Ä–µ–∫–∏–Ω–≥–∞ Celery –∏ polling dispatcher –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    Returns:
        None
    """
    logger.info("bot_started")
    asyncio.create_task(track_results(bot))
    await dp.start_polling(bot)


if __name__ == "__main__":
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª Telegram-–±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç–∞.
    """
    asyncio.run(main())
