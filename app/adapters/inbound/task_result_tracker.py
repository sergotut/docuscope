"""
–¢—Ä–µ–∫–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á Celery –¥–ª—è Telegram-–±–æ—Ç–∞.

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.
"""

import asyncio

import structlog
from aiogram import Bot
from celery.result import AsyncResult

from app.infrastructure.task_queue import celery_app

logger = structlog.get_logger()

# –•—Ä–∞–Ω–∏–º ID –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
task_registry = {}  # task_id -> chat_id


async def track_results(bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á Celery –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á—ë—Ç–æ–º –∏–ª–∏ –æ—à–∏–±–∫–æ–π –≤ Telegram.

    Args:
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

    Returns:
        None
    """
    while True:
        await asyncio.sleep(2)
        finished = []

        for task_id, chat_id in task_registry.items():
            result = AsyncResult(task_id, app=celery_app)
            if result.ready():
                try:
                    output = result.get()
                    summary = output["summary"]
                    await bot.send_message(
                        chat_id, f"üìÑ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{summary}"
                    )
                    logger.info("result_sent", user_id=chat_id, task_id=task_id)
                except Exception as e:
                    await bot.send_message(
                        chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞."
                    )
                    logger.error("result_error", error=str(e), task_id=task_id)
                finished.append(task_id)

        for tid in finished:
            task_registry.pop(tid, None)
